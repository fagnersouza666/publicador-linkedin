#!/usr/bin/env python3
"""
Script para execu√ß√£o no Docker usando imagem oficial do Selenium
"""
import os, time, uuid
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# === Carregar vari√°veis do .env ===
load_dotenv()
EMAIL = os.getenv("LINKEDIN_EMAIL")
PWD = os.getenv("LINKEDIN_PASSWORD")
TEXT = os.getenv("POST_TEXT")
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

print("üê≥ Executando no Docker com Selenium Grid...")


def log(message):
    """Log com timestamp para debug"""
    timestamp = time.strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")


def wait_for_element(driver, selectors, timeout=5, method="css"):
    """
    Aguarda por um elemento usando m√∫ltiplos seletores
    """
    log(f"üîç Aguardando elemento com {len(selectors)} seletores...")

    wait = WebDriverWait(driver, timeout)

    for i, selector in enumerate(selectors):
        try:
            # Verificar se a sess√£o ainda est√° ativa
            try:
                driver.current_url
            except:
                log("‚ùå Sess√£o do navegador perdida")
                return None

            if method == "mixed":
                # Detecta automaticamente se √© XPath ou CSS
                if selector.startswith("//") or selector.startswith("("):
                    element = wait.until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                else:
                    element = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
            elif method == "xpath":
                element = wait.until(
                    EC.presence_of_element_located((By.XPATH, selector))
                )
            else:
                element = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )

            log(f"‚úÖ Elemento encontrado com seletor {i+1}: {selector}")
            return element

        except TimeoutException:
            continue
        except Exception as e:
            log(f"‚ö†Ô∏è Erro ao procurar elemento com seletor {i+1}: {e}")
            continue

    log(f"‚ùå Nenhum elemento encontrado ap√≥s {timeout}s")
    return None


def safe_click(driver, element, description="elemento"):
    """
    Clica em um elemento de forma segura, com fallback para JavaScript
    """
    try:
        # Scroll at√© o elemento
        driver.execute_script(
            "arguments[0].scrollIntoView({block: 'center'});", element
        )
        time.sleep(0.5)

        # Tentar clique normal
        element.click()
        log(f"‚úÖ Clique normal no {description} bem-sucedido")
        return True

    except Exception as e:
        log(f"‚ö†Ô∏è Clique normal falhou no {description}: {e}")
        try:
            # Fallback para JavaScript
            driver.execute_script("arguments[0].click();", element)
            log(f"‚úÖ Clique JavaScript no {description} bem-sucedido")
            return True
        except Exception as e2:
            log(f"‚ùå Clique JavaScript tamb√©m falhou no {description}: {e2}")
            return False


def get_driver():
    """Configura√ß√£o para Selenium Grid no container"""
    log("üîß Inicializando navegador no Docker...")

    opts = webdriver.ChromeOptions()

    # Se DEBUG_MODE = true, n√£o usa headless
    if not DEBUG_MODE:
        opts.add_argument("--headless")
        log("üëª Modo headless ativado (invis√≠vel)")
    else:
        log("üëÅÔ∏è Modo visual ativado - voc√™ ver√° o navegador!")

    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--window-size=1920,1080")
    opts.add_argument("--remote-debugging-port=9222")

    # Argumentos √∫nicos para evitar conflitos de user-data-dir
    unique_id = str(uuid.uuid4())[:8]
    opts.add_argument(f"--user-data-dir=/tmp/chrome-data-{unique_id}")
    opts.add_argument("--disable-extensions")
    opts.add_argument("--disable-plugins")
    opts.add_argument("--disable-images")
    opts.add_argument("--disable-web-security")

    # Melhorar performance
    opts.add_argument("--disable-background-timer-throttling")
    opts.add_argument("--disable-backgrounding-occluded-windows")
    opts.add_argument("--disable-renderer-backgrounding")

    # Tentar conectar ao Chrome local do Selenium Grid
    try:
        return webdriver.Chrome(options=opts)
    except Exception as e:
        log(f"‚ùå Erro ao conectar Chrome: {e}")
        # Fallback para remote driver se necess√°rio
        from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

        return webdriver.Remote(
            command_executor="http://localhost:4444/wd/hub",
            desired_capabilities=DesiredCapabilities.CHROME,
            options=opts,
        )


def login(drv):
    """Login no LinkedIn"""
    log("üîë Fazendo login no LinkedIn...")
    drv.get("https://www.linkedin.com/login")
    time.sleep(3)

    log("‚úçÔ∏è Preenchendo credenciais...")
    drv.find_element(By.ID, "username").send_keys(EMAIL)
    drv.find_element(By.ID, "password").send_keys(PWD, Keys.RETURN)
    time.sleep(5)

    current_url = drv.current_url
    if "challenge" in current_url:
        log("üö® ATEN√á√ÉO: LinkedIn est√° pedindo verifica√ß√£o adicional!")
        raise Exception("Verifica√ß√£o adicional necess√°ria")
    elif "feed" in current_url:
        log("‚úÖ Login realizado com sucesso")
    else:
        log(f"‚ö†Ô∏è URL inesperada ap√≥s login: {current_url}")
        raise Exception("Falha no login")


def publish_post(drv, text):
    """Publica o post com seletores robustos"""
    log("üìù Iniciando processo de publica√ß√£o...")

    try:
        log("üì∞ Navegando para o feed...")
        drv.get("https://www.linkedin.com/feed/")
        time.sleep(5)

        log("üéØ Procurando bot√£o 'Come√ßar um post'...")

        # Lista expandida de seletores poss√≠veis
        start_post_selectors = [
            # Seletores mais recentes (2024)
            "button[aria-label*='Start a post']",
            "button[aria-label*='Come√ßar um post']",
            "button[aria-label*='Commencer un post']",
            "button[aria-label*='Empezar una publicaci√≥n']",
            # Seletores por classe e data attributes
            ".share-box-feed-entry__trigger",
            "[data-test-id='share-box-trigger']",
            "[data-test-id='start-a-post-button']",
            ".feed-shared-update-v2__start-conversation-button",
            # Seletores por conte√∫do de texto
            "//button[contains(text(), 'Start a post')]",
            "//button[contains(text(), 'Come√ßar um post')]",
            # Seletores gen√©ricos
            ".artdeco-button--primary[aria-label*='post']",
            "button.share-box-feed-entry__trigger",
            ".share-box-feed-entry button",
            # Novos seletores mais gen√©ricos
            "//button[contains(@aria-label, 'post') or contains(@aria-label, 'Post')]",
            "button[data-tracking-control-name='public_post_feed-header_publisher-text-content']",
        ]

        # Usar fun√ß√£o auxiliar para encontrar o bot√£o
        post_button = wait_for_element(
            drv, start_post_selectors, timeout=8, method="mixed"
        )

        if not post_button:
            # Tentar estrat√©gias alternativas
            log("üîÑ Tentando estrat√©gias alternativas...")

            # Verificar se h√° modal ou popup bloqueando
            try:
                close_buttons = drv.find_elements(
                    By.CSS_SELECTOR,
                    "[aria-label*='Close'], [aria-label*='Fechar'], .artdeco-modal__dismiss",
                )
                if close_buttons:
                    log("üö™ Fechando modal/popup que pode estar bloqueando...")
                    for btn in close_buttons:
                        safe_click(drv, btn, "bot√£o fechar modal")
                    time.sleep(1)
            except:
                pass

            # Recarregar a p√°gina
            log("üîÑ Recarregando p√°gina...")
            drv.refresh()
            time.sleep(3)

            # Tentar novamente
            post_button = wait_for_element(
                drv, start_post_selectors, timeout=5, method="mixed"
            )

            if not post_button:
                raise Exception(
                    "Bot√£o 'Come√ßar um post' n√£o encontrado com nenhum seletor"
                )

        log("üëÜ Clicando no bot√£o para come√ßar post...")
        if not safe_click(drv, post_button, "bot√£o come√ßar post"):
            raise Exception("Falha ao clicar no bot√£o de come√ßar post")

        time.sleep(4)

        log("üìù Procurando √°rea de texto do post...")
        text_area_selectors = [
            # Seletores mais recentes
            ".ql-editor[data-placeholder]",
            ".ql-editor p",
            "div[role='textbox']",
            # Seletores por placeholder
            "[data-placeholder*='What do you want to talk about']",
            "[data-placeholder*='Do que voc√™ gostaria de falar']",
            # Seletores cl√°ssicos
            ".ql-editor",
            ".share-creation-state__text-editor .ql-editor",
            # Fallbacks
            "div[contenteditable='true']",
            ".mentions-texteditor__content",
        ]

        # Usar fun√ß√£o auxiliar para encontrar √°rea de texto
        text_area = wait_for_element(drv, text_area_selectors, timeout=6, method="css")

        if not text_area:
            raise Exception("√Årea de texto n√£o encontrada")

        log("‚úçÔ∏è Escrevendo o texto do post...")
        # Focar na √°rea de texto
        if not safe_click(drv, text_area, "√°rea de texto"):
            drv.execute_script("arguments[0].focus();", text_area)

        time.sleep(1)

        # Limpar e escrever texto
        try:
            text_area.send_keys(Keys.CONTROL + "a")
            time.sleep(0.5)
            text_area.send_keys(Keys.DELETE)
            time.sleep(0.5)
            text_area.send_keys(text)
            log(f"‚úÖ Texto inserido: {text[:50]}...")
        except Exception as e:
            log(f"‚ö†Ô∏è Falha ao inserir texto normalmente: {e}")
            log("üîÑ Tentando com JavaScript...")
            drv.execute_script(
                "arguments[0].innerHTML = arguments[1];", text_area, text
            )

        time.sleep(2)

        log("üéØ Procurando bot√£o 'Publicar'...")
        publish_selectors = [
            # Por texto em diferentes idiomas
            "//button[contains(text(),'Post') and not(contains(text(),'postpone'))]",
            "//button[contains(text(),'Publicar')]",
            "//button[contains(text(),'Publier')]",
            # Por data attributes
            "[data-test-id='share-actions-publish-button']",
            "[data-test-id='post-button']",
            # Por aria-label
            "button[aria-label*='Post']",
            "button[aria-label*='Publicar']",
            # Por classes
            ".share-actions__primary-action",
            ".artdeco-button--primary[type='submit']",
            # Fallback gen√©rico
            "button[type='submit']",
        ]

        # Usar fun√ß√£o auxiliar para encontrar bot√£o publicar
        publish_button = wait_for_element(
            drv, publish_selectors, timeout=5, method="mixed"
        )

        if not publish_button:
            raise Exception("Bot√£o 'Publicar' n√£o encontrado")

        # Verificar se bot√£o est√° habilitado
        if not publish_button.is_enabled():
            log("‚ö†Ô∏è Bot√£o publicar est√° desabilitado, aguardando...")
            time.sleep(3)

        log("üöÄ Clicando em 'Publicar'...")
        if not safe_click(drv, publish_button, "bot√£o publicar"):
            raise Exception("Falha ao clicar no bot√£o publicar")

        time.sleep(5)
        log("‚úÖ Post publicado com sucesso!")

    except Exception as e:
        log(f"‚ùå Erro durante publica√ß√£o: {e}")
        raise


if __name__ == "__main__":
    log("üöÄ Iniciando automatizador LinkedIn no Docker...")

    driver = None
    try:
        driver = get_driver()
        log("‚úÖ Driver iniciado com sucesso")

        if EMAIL and PWD and EMAIL != "seu_email@exemplo.com":
            login(driver)
            publish_post(driver, TEXT)
        else:
            log("‚ö†Ô∏è Credenciais n√£o configuradas - executando apenas teste")
            driver.get("https://www.linkedin.com")
            log(f"‚úÖ P√°gina carregada: {driver.title}")

    except Exception as e:
        log(f"‚ùå Erro geral: {e}")
    finally:
        if driver:
            driver.quit()
        log("üèÅ Execu√ß√£o finalizada")
