import os, time
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# === Carregar vari√°veis do .env ===
load_dotenv()
EMAIL = os.getenv("LINKEDIN_EMAIL")
PWD = os.getenv("LINKEDIN_PASSWORD")
TEXT = os.getenv("POST_TEXT")
BROWSER = os.getenv("BROWSER", "firefox").lower()
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"  # Novo: modo debug


def log(message):
    """Log com timestamp para debug"""
    timestamp = time.strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")


# === Inicializa driver ===
def get_driver():
    log("üîß Inicializando navegador...")

    if BROWSER == "chromium" or BROWSER == "chrome":
        opts = webdriver.ChromeOptions()

        # Se DEBUG_MODE = true, n√£o usa headless
        if not DEBUG_MODE:
            opts.add_argument("--headless=new")
            log("üëª Modo headless ativado (invis√≠vel)")
        else:
            log("üëÅÔ∏è Modo visual ativado - voc√™ ver√° o navegador!")

        opts.add_argument("--disable-gpu")
        opts.add_argument("--window-size=1920,1080")
        opts.add_argument("--no-sandbox")
        opts.add_argument("--disable-dev-shm-usage")

        log("üåê Usando Chrome/Chromium...")
        return webdriver.Chrome(options=opts)
    else:
        opts = webdriver.FirefoxOptions()
        opts.binary_location = "/usr/bin/firefox"

        # Se DEBUG_MODE = true, n√£o usa headless
        if not DEBUG_MODE:
            opts.add_argument("--headless")
            log("üëª Modo headless ativado (invis√≠vel)")
        else:
            log("üëÅÔ∏è Modo visual ativado - voc√™ ver√° o navegador!")

        opts.add_argument("--width=1920")
        opts.add_argument("--height=1080")
        opts.add_argument("--no-sandbox")
        opts.add_argument("--disable-dev-shm-usage")

        # Configura√ß√µes espec√≠ficas para container Docker
        opts.set_preference("dom.webdriver.enabled", False)
        opts.set_preference("useAutomationExtension", False)

        log("ü¶ä Usando Firefox...")
        return webdriver.Firefox(options=opts)


# === Login no LinkedIn ===
def login(drv):
    log("üîê Iniciando processo de login...")

    log("üì± Acessando p√°gina de login do LinkedIn...")
    drv.get("https://www.linkedin.com/login")

    if DEBUG_MODE:
        log("‚è≥ Aguardando 3 segundos para voc√™ ver a p√°gina...")
        time.sleep(3)

    log("‚úçÔ∏è Preenchendo email...")
    username_field = drv.find_element(By.ID, "username")
    username_field.clear()
    username_field.send_keys(EMAIL)

    log("üîë Preenchendo senha...")
    password_field = drv.find_element(By.ID, "password")
    password_field.clear()
    password_field.send_keys(PWD)

    if DEBUG_MODE:
        log("‚è≥ Aguardando 2 segundos antes de clicar em entrar...")
        time.sleep(2)

    log("üöÄ Clicando no bot√£o de login...")
    password_field.send_keys(Keys.RETURN)

    log("‚è≥ Aguardando resposta do LinkedIn...")
    time.sleep(5)

    current_url = drv.current_url
    log(f"üìç URL atual: {current_url}")

    # Verifica√ß√µes de login
    if "challenge" in current_url:
        log("üö® ATEN√á√ÉO: LinkedIn est√° pedindo verifica√ß√£o adicional!")
        log("üì± VERIFICA√á√ÉO NECESS√ÅRIA:")
        log("   1Ô∏è‚É£ Abra o app LinkedIn no seu celular")
        log("   2Ô∏è‚É£ Procure a notifica√ß√£o de login")
        log("   3Ô∏è‚É£ Toque em 'Yes' para confirmar")
        log("   4Ô∏è‚É£ OU clique 'Resend' no navegador")

        if DEBUG_MODE:
            log("‚è∏Ô∏è Aguardando voc√™ resolver a verifica√ß√£o...")
            log("üí° Dica: Mantenha esta janela aberta e resolva no celular")

            # Aguardar resolu√ß√£o da verifica√ß√£o
            while "challenge" in drv.current_url:
                try:
                    response = input(
                        "‚úÖ Resolveu a verifica√ß√£o? (s/n/r=resend): "
                    ).lower()
                    if response == "s":
                        break
                    elif response == "r":
                        try:
                            resend_btn = drv.find_element(
                                By.XPATH,
                                "//button[contains(text(), 'Resend') or contains(text(), 'Reenviar')]",
                            )
                            resend_btn.click()
                            log(
                                "üì§ Bot√£o 'Resend' clicado! Verifique seu celular novamente."
                            )
                            time.sleep(3)
                        except:
                            log("‚ö†Ô∏è Bot√£o 'Resend' n√£o encontrado")
                    elif response == "n":
                        log(
                            "‚è≥ Aguardando... Digite 's' quando resolver ou 'r' para resend"
                        )

                    time.sleep(2)
                    current_url = drv.current_url
                    log(f"üìç URL atual: {current_url}")

                except KeyboardInterrupt:
                    log("‚èπÔ∏è Processo interrompido pelo usu√°rio")
                    raise Exception("Verifica√ß√£o cancelada pelo usu√°rio")

            log("‚úÖ Verifica√ß√£o resolvida! Continuando...")
        else:
            log("üí° Execute com 'python debug_local.py' para resolver interativamente")
            raise Exception(
                "Verifica√ß√£o adicional necess√°ria - use modo debug para resolver"
            )

    elif "feed" in current_url:
        log("‚úÖ Login realizado com sucesso!")
    elif "login" in current_url:
        log("‚ùå Login falhou - ainda na p√°gina de login")
        log("üîç Verificando se h√° mensagens de erro...")
        try:
            error_element = drv.find_element(
                By.CSS_SELECTOR, ".alert--error, .form__label--error"
            )
            error_text = error_element.text
            log(f"‚ùå Erro encontrado: {error_text}")
        except:
            log("‚ùå Login falhou, mas nenhuma mensagem de erro espec√≠fica encontrada")
        raise Exception(
            "Falha no login - credenciais incorretas ou verifica√ß√£o necess√°ria"
        )
    else:
        log(f"‚ö†Ô∏è URL inesperada ap√≥s login: {current_url}")
        if DEBUG_MODE:
            log("üîç Verificando se precisa de a√ß√£o manual...")
            input("‚è∏Ô∏è Pressione ENTER ap√≥s verificar a p√°gina...")


# === Publica o post ===
def publish_post(drv, text):
    log("üìù Iniciando processo de publica√ß√£o...")

    log("üì∞ Navegando para o feed...")
    drv.get("https://www.linkedin.com/feed/")
    time.sleep(3)

    log("üéØ Procurando bot√£o 'Come√ßar um post'...")
    try:
        # Tenta diferentes seletores poss√≠veis
        start_post_selectors = [
            ".share-box-feed-entry__trigger",
            "[data-test-id='share-box-trigger']",
            ".artdeco-button--primary[aria-label*='post']",
            "button[aria-label*='Come√ßar um post']",
        ]

        post_button = None
        for selector in start_post_selectors:
            try:
                post_button = drv.find_element(By.CSS_SELECTOR, selector)
                log(f"‚úÖ Bot√£o encontrado com seletor: {selector}")
                break
            except:
                continue

        if not post_button:
            raise Exception("Bot√£o 'Come√ßar um post' n√£o encontrado")

        log("üëÜ Clicando no bot√£o para come√ßar post...")
        post_button.click()
        time.sleep(3)

        log("üìù Procurando √°rea de texto...")
        text_area_selectors = [
            ".ql-editor",
            "[data-placeholder='Do que voc√™ gostaria de falar?']",
            ".share-creation-state__text-editor .ql-editor",
        ]

        text_area = None
        for selector in text_area_selectors:
            try:
                text_area = drv.find_element(By.CSS_SELECTOR, selector)
                log(f"‚úÖ √Årea de texto encontrada com seletor: {selector}")
                break
            except:
                continue

        if not text_area:
            raise Exception("√Årea de texto n√£o encontrada")

        log("‚úçÔ∏è Escrevendo o texto do post...")
        text_area.click()
        time.sleep(1)
        text_area.send_keys(text)

        if DEBUG_MODE:
            log("‚è≥ Aguardando 3 segundos para voc√™ ver o texto...")
            time.sleep(3)

        log("üéØ Procurando bot√£o 'Publicar'...")
        publish_selectors = [
            "//button[contains(.,'Publicar')]",
            "//button[contains(.,'Post')]",
            "[data-test-id='share-actions-publish-button']",
        ]

        publish_button = None
        for selector in publish_selectors:
            try:
                if selector.startswith("//"):
                    publish_button = drv.find_element(By.XPATH, selector)
                else:
                    publish_button = drv.find_element(By.CSS_SELECTOR, selector)
                log(f"‚úÖ Bot√£o publicar encontrado!")
                break
            except:
                continue

        if not publish_button:
            raise Exception("Bot√£o 'Publicar' n√£o encontrado")

        log("üöÄ Clicando em 'Publicar'...")
        publish_button.click()
        time.sleep(5)

        log("‚úÖ Post publicado com sucesso!")

    except Exception as e:
        log(f"‚ùå Erro durante publica√ß√£o: {e}")
        if DEBUG_MODE:
            log("üîç Aguardando para voc√™ inspecionar a p√°gina...")
            input("‚è∏Ô∏è Pressione ENTER para continuar...")
        raise


# === Execu√ß√£o principal ===
if __name__ == "__main__":
    log("üöÄ Iniciando Publicador LinkedIn...")

    if DEBUG_MODE:
        log("üêõ MODO DEBUG ATIVADO - Processo ser√° vis√≠vel!")
    else:
        log("üëª Modo headless - processo invis√≠vel")

    log(f"üìß Email: {EMAIL}")
    log(f"üåê Navegador: {BROWSER}")
    log(f"üìù Texto: {TEXT[:50]}..." if len(TEXT) > 50 else f"üìù Texto: {TEXT}")

    driver = get_driver()
    try:
        login(driver)
        publish_post(driver, TEXT)
        log("üéâ Processo conclu√≠do com sucesso!")
    except Exception as e:
        log(f"üí• Erro geral: {e}")
        if DEBUG_MODE:
            log("üîç Mantendo navegador aberto para debug...")
            input("‚è∏Ô∏è Pressione ENTER para fechar...")
    finally:
        log("üîö Fechando navegador...")
        driver.quit()
        log("üëã Finalizado!")
